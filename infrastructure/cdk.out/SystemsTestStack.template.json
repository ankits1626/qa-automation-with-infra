{
 "Resources": {
  "SystemTestsBucket53923566": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/SystemTestsBucket/SystemTestsBucket/Resource"
   }
  },
  "SystemTestsBucketPolicy713FBEF3": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "SystemTestsBucket53923566"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "SystemTestsBucket53923566",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SystemTestsBucket53923566",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/SystemTestsBucket/SystemTestsBucket/Policy/Resource"
   }
  },
  "SystemTestsBucketAutoDeleteObjectsCustomResource0BB8033E": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "SystemTestsBucket53923566"
    }
   },
   "DependsOn": [
    "SystemTestsBucketPolicy713FBEF3"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/SystemTestsBucket/SystemTestsBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "SystemTestsBucketNotificationsE68500E7": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "SystemTestsBucket53923566"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".ipa"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "SystemTestsTriggerSystemTestsTriggerFunctionECE8D76D",
         "Arn"
        ]
       }
      },
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".apk"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "SystemTestsTriggerSystemTestsTriggerFunctionECE8D76D",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true,
    "SkipDestinationValidation": false
   },
   "DependsOn": [
    "SystemTestsBucketAllowBucketNotificationsToSystemsTestStackSystemTestsTriggerSystemTestsTriggerFunctionC63A86928F7776F5",
    "SystemTestsBucketPolicy713FBEF3"
   ],
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/SystemTestsBucket/SystemTestsBucket/Notifications/Resource"
   }
  },
  "SystemTestsBucketAllowBucketNotificationsToSystemsTestStackSystemTestsTriggerSystemTestsTriggerFunctionC63A86928F7776F5": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "SystemTestsTriggerSystemTestsTriggerFunctionECE8D76D",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "SystemTestsBucket53923566",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/SystemTestsBucket/SystemTestsBucket/AllowBucketNotificationsToSystemsTestStackSystemTestsTriggerSystemTestsTriggerFunctionC63A8692"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-ap-south-1"
     },
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "SystemTestsBucket53923566"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6",
    "aws:asset:property": "Code"
   }
  },
  "SystemTestsBuildProjectTestSuiteBuilderRoleAB71C8E1": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/SystemTestsBuildProject/TestSuiteBuilder/Role/Resource"
   }
  },
  "SystemTestsBuildProjectTestSuiteBuilderRoleDefaultPolicyEF7C0474": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:logs:ap-south-1:",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "SystemTestsBuildProjectTestSuiteBuilder17EC71D0"
           },
           ":*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:logs:ap-south-1:",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "SystemTestsBuildProjectTestSuiteBuilder17EC71D0"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:BatchPutCodeCoverages",
        "codebuild:BatchPutTestCases",
        "codebuild:CreateReport",
        "codebuild:CreateReportGroup",
        "codebuild:UpdateReport"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:codebuild:ap-south-1:",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "SystemTestsBuildProjectTestSuiteBuilder17EC71D0"
          },
          "-*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SystemTestsBuildProjectTestSuiteBuilderRoleDefaultPolicyEF7C0474",
    "Roles": [
     {
      "Ref": "SystemTestsBuildProjectTestSuiteBuilderRoleAB71C8E1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/SystemTestsBuildProject/TestSuiteBuilder/Role/DefaultPolicy/Resource"
   }
  },
  "SystemTestsBuildProjectTestSuiteBuilder17EC71D0": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "NO_ARTIFACTS"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "EncryptionKey": "alias/aws/s3",
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/standard:7.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": false,
     "Type": "LINUX_CONTAINER"
    },
    "Name": "test-suite-builder",
    "ServiceRole": {
     "Fn::GetAtt": [
      "SystemTestsBuildProjectTestSuiteBuilderRoleAB71C8E1",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": {
      "Fn::Join": [
       "",
       [
        "{\n  \"version\": 0.2,\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo 'Execution started'\",\n        \"echo 'Android Device Farm Project ARN: ",
        {
         "Fn::GetAtt": [
          "ExportsReader8B249524",
          "/cdk/exports/SystemsTestStack/DeviceFarmStackuswest2FnGetAttAndroidProjectArnCEB9DA25"
         ]
        },
        "'\",\n        \"echo 'iOS Device Farm Project ARN: ",
        {
         "Fn::GetAtt": [
          "ExportsReader8B249524",
          "/cdk/exports/SystemsTestStack/DeviceFarmStackuswest2FnGetAttIOSProjectArn47AC84B0"
         ]
        },
        "'\",\n        \"echo 'Building test suite'\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"echo 'Test suite build completed'\"\n      ]\n    }\n  }\n}"
       ]
      ]
     },
     "Type": "NO_SOURCE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/SystemTestsBuildProject/TestSuiteBuilder/Resource"
   }
  },
  "SystemTestsTriggerSystemTestsTriggerFunctionServiceRoleB25EBC18": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/SystemTestsTrigger/SystemTestsTriggerFunction/ServiceRole/Resource"
   }
  },
  "SystemTestsTriggerSystemTestsTriggerFunctionServiceRoleDefaultPolicyD7A684DA": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "codebuild:StartBuild",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "SystemTestsBuildProjectTestSuiteBuilder17EC71D0",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "SystemTestsBucket53923566",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SystemTestsBucket53923566",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SystemTestsTriggerSystemTestsTriggerFunctionServiceRoleDefaultPolicyD7A684DA",
    "Roles": [
     {
      "Ref": "SystemTestsTriggerSystemTestsTriggerFunctionServiceRoleB25EBC18"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/SystemTestsTrigger/SystemTestsTriggerFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "SystemTestsTriggerSystemTestsTriggerFunctionECE8D76D": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-ap-south-1"
     },
     "S3Key": "884f855304335be7e6c313cfcb4e764bf7a9a31a5397d9174b7858be3b95745d.zip"
    },
    "Environment": {
     "Variables": {
      "CODEBUILD_PROJECT_NAME": {
       "Ref": "SystemTestsBuildProjectTestSuiteBuilder17EC71D0"
      }
     }
    },
    "Handler": "system_tests_trigger_handler.lambda_handler",
    "Role": {
     "Fn::GetAtt": [
      "SystemTestsTriggerSystemTestsTriggerFunctionServiceRoleB25EBC18",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "SystemTestsTriggerSystemTestsTriggerFunctionServiceRoleDefaultPolicyD7A684DA",
    "SystemTestsTriggerSystemTestsTriggerFunctionServiceRoleB25EBC18"
   ],
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/SystemTestsTrigger/SystemTestsTriggerFunction/Resource",
    "aws:asset:path": "asset.884f855304335be7e6c313cfcb4e764bf7a9a31a5397d9174b7858be3b95745d",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications = sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj, dict):\n      return json_obj\n  for key, value in json_obj.items():\n      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item) for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/9VUy27bMBD8lvAYMGqc9NLcbNktDDiJYKcnwTBocu0woUiBjwQCoX8v+JBhJ0VT9NL2RC13djg7pPaquLr8XFyekVdzQdnzheDbwq8soc+YvJqNN9eFnzj6DLb2iDirpiDAwv32Cag16MZqBxhpaNQLEZUSnHboBjEwVqsO9Wtc7mSqx2lJmNqjbQzRDTo/gaV8Bk+IgXrdY0GaLSOFL3eyAt1wY7iS+KuT1HIla49AvnCtZAMyMWJkeQPKDRFVDPLnI5FMgM6RdjIgkwzsEWFsdsxVR9Q5WieNw5E9DoxbxwUrfKVVcCP2xAVbtUAz+4msnJ43ZA8hsl07aGKwI07YUjWts/CQEpPv88V08212N1uOF6PN6na8WCCMeKifs1wZo8oJUWkuKW+JyNXl/XQWGRBGBqgGa26JJHvQpQYG0nIizGACtMpwq3SXfUD0YyU9Rm1q/I4MBkaPsh095qQp/FIJqD3SSsABhxExxjXAJl0woh2kjylV7nCDCRPqx9HzdES+pAd1aHh4dbXv1zFrLaGPcym4hEMuXuGHyV/z/rFmjJpoPYuUHEwgPdnrxjpjf0fIP9dg5r497uiv9BgfYFCH85wJooeCBxUy73jebzO2ssRC+G3NkaSfbf8v/OnPjJ702FxviDFgTTEOS49LZ6xqlmCU0xQiUTQyb7zJV1q9cAY6TGccGVaW7Lnc42MGfJicuOrso5KfrovRqPhy9mQ4v8hzt1im9Qfy/a/JhwYAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/CDKMetadata/Default"
   }
  },
  "ExportsReader8B249524": {
   "Type": "Custom::CrossRegionExportReader",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomCrossRegionExportReaderCustomResourceProviderHandler46647B68",
      "Arn"
     ]
    },
    "ReaderProps": {
     "region": "ap-south-1",
     "prefix": "SystemsTestStack",
     "imports": {
      "/cdk/exports/SystemsTestStack/DeviceFarmStackuswest2FnGetAttAndroidProjectArnCEB9DA25": "{{resolve:ssm:/cdk/exports/SystemsTestStack/DeviceFarmStackuswest2FnGetAttAndroidProjectArnCEB9DA25}}",
      "/cdk/exports/SystemsTestStack/DeviceFarmStackuswest2FnGetAttIOSProjectArn47AC84B0": "{{resolve:ssm:/cdk/exports/SystemsTestStack/DeviceFarmStackuswest2FnGetAttIOSProjectArn47AC84B0}}"
     }
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/ExportsReader/Resource/Default"
   }
  },
  "CustomCrossRegionExportReaderCustomResourceProviderRole10531BBD": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:aws:ssm:ap-south-1:",
            {
             "Ref": "AWS::AccountId"
            },
            ":parameter/cdk/exports/SystemsTestStack/*"
           ]
          ]
         },
         "Action": [
          "ssm:AddTagsToResource",
          "ssm:RemoveTagsFromResource",
          "ssm:GetParameters"
         ]
        }
       ]
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/Custom::CrossRegionExportReaderCustomResourceProvider/Role"
   }
  },
  "CustomCrossRegionExportReaderCustomResourceProviderHandler46647B68": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-ap-south-1"
     },
     "S3Key": "d41c8e6342cd078b5ea5aec11522bdb605eae00f4bb98a3fb0b44c827e9b5ca9.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomCrossRegionExportReaderCustomResourceProviderRole10531BBD",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x"
   },
   "DependsOn": [
    "CustomCrossRegionExportReaderCustomResourceProviderRole10531BBD"
   ],
   "Metadata": {
    "aws:cdk:path": "SystemsTestStack/Custom::CrossRegionExportReaderCustomResourceProvider/Handler",
    "aws:asset:path": "asset.d41c8e6342cd078b5ea5aec11522bdb605eae00f4bb98a3fb0b44c827e9b5ca9",
    "aws:asset:property": "Code"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}